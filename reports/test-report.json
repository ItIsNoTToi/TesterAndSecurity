{
  "stats": {
    "suites": 14,
    "tests": 25,
    "passes": 2,
    "pending": 0,
    "failures": 23,
    "start": "2024-11-09T07:26:54.963Z",
    "end": "2024-11-09T07:26:57.297Z",
    "duration": 2334,
    "testsRegistered": 25,
    "passPercent": 8,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a9b1b780-0291-4900-9afe-75407192c500",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 507,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Register and log in a test user to obtain the token\nconst loginResponse = await request(app)\n  .post('/login')\n  .send({\n    username: 'admin',\n    password: 'Hung123456@',\n  });\nuserId = loginResponse.body.userId;\ntoken = loginResponse.body.token; // Store token for use in tests",
          "err": {},
          "uuid": "72d21303-5866-4263-b814-55cf05f1332c",
          "parentUUID": "a9b1b780-0291-4900-9afe-75407192c500",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 320,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Register and log in a test user to obtain the token\nconst loginResponse = await request(app)\n  .post('/login')\n  .send({\n    username: 'admin',\n    password: 'Hung123456@',\n  });\nuserId = loginResponse.body.userId;\ntoken = loginResponse.body.token; // Store token for use in tests",
          "err": {},
          "uuid": "5869ddc9-66cc-4989-92b2-540ed321dfda",
          "parentUUID": "a9b1b780-0291-4900-9afe-75407192c500",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 312,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Register and log in a test user to obtain the token\nconst loginResponse = await request(app)\n  .post('/login')\n  .send({\n    username: 'admin',\n    password: 'Hung123456@',\n  });\nuserId = loginResponse.body.userId;\ntoken = loginResponse.body.token; // Store token for use in tests",
          "err": {},
          "uuid": "ea02cf20-7722-4dc4-97b6-c76a3dfedff9",
          "parentUUID": "a9b1b780-0291-4900-9afe-75407192c500",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a773922-e9ec-4e18-96dc-8ac933231952",
          "title": "Friendship API",
          "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\addfriend.test.mjs",
          "file": "\\test\\Integration Test\\addfriend.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ada2ad84-32e1-4378-a99b-4cb2dd0d799d",
              "title": "GET /listfriend",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\addfriend.test.mjs",
              "file": "\\test\\Integration Test\\addfriend.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return list of friends for logged-in user",
                  "fullTitle": "Friendship API GET /listfriend should return list of friends for logged-in user",
                  "timedOut": false,
                  "duration": 90,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Giả sử có một người bạn trong cơ sở dữ liệu\nconst listFriendResponse = await request(app)\n  .get('/friend/listfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    userId: userId\n  });\n  \nexpect(listFriendResponse.statusCode).to.equal(200);\nexpect(listFriendResponse.body.message).to.equal('List of Friends');\nexpect(listFriendResponse.body.friends).to.not.be.empty;",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:44:50)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "aa51460e-f156-4898-b056-45e74e8ecafc",
                  "parentUUID": "ada2ad84-32e1-4378-a99b-4cb2dd0d799d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if no friends found",
                  "fullTitle": "Friendship API GET /listfriend should return 404 if no friends found",
                  "timedOut": false,
                  "duration": 43,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Giả sử người dùng chưa có bạn bè\nconst listFriendResponse = await request(app)\n  .get('/friend/listfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    userId: userId\n  });\n  \nexpect(listFriendResponse.statusCode).to.equal(404);\nexpect(listFriendResponse.body.message).to.equal('you have been not friend');",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'you have been not friend'",
                    "estack": "AssertionError: expected undefined to equal 'you have been not friend'\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:59:52)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "fda46d6e-6132-4058-9372-1c66a2a4ae63",
                  "parentUUID": "ada2ad84-32e1-4378-a99b-4cb2dd0d799d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "aa51460e-f156-4898-b056-45e74e8ecafc",
                "fda46d6e-6132-4058-9372-1c66a2a4ae63"
              ],
              "pending": [],
              "skipped": [],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "214defd0-43fc-4543-8de6-9896e7f4ee87",
              "title": "GET /listrequestfriend",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\addfriend.test.mjs",
              "file": "\\test\\Integration Test\\addfriend.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return list of sent friend requests for logged-in user",
                  "fullTitle": "Friendship API GET /listrequestfriend should return list of sent friend requests for logged-in user",
                  "timedOut": false,
                  "duration": 46,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const listRequestResponse = await request(app)\n  .get('/friend/listrequestfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    userId: userId\n  });\n  \nexpect(listRequestResponse.statusCode).to.equal(200);\nexpect(listRequestResponse.body.message).to.equal('Danh sach nhung nguoi da gui ket ban');\nexpect(listRequestResponse.body.friends).to.not.be.empty;",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:72:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "c6c69516-5743-48da-80df-fde57c650ab2",
                  "parentUUID": "214defd0-43fc-4543-8de6-9896e7f4ee87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if no requests sent",
                  "fullTitle": "Friendship API GET /listrequestfriend should return 404 if no requests sent",
                  "timedOut": false,
                  "duration": 38,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const listRequestResponse = await request(app)\n  .get('/friend/listrequestfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    userId: userId\n  });\n  \nexpect(listRequestResponse.statusCode).to.equal(404);\nexpect(listRequestResponse.body.message).to.equal('Ban chua gui ket ban voi ai');",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'Ban chua gui ket ban voi ai'",
                    "estack": "AssertionError: expected undefined to equal 'Ban chua gui ket ban voi ai'\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:86:53)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "9392d7ed-a5e3-4aba-bfcc-0d030f55aedd",
                  "parentUUID": "214defd0-43fc-4543-8de6-9896e7f4ee87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c6c69516-5743-48da-80df-fde57c650ab2",
                "9392d7ed-a5e3-4aba-bfcc-0d030f55aedd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6fee9955-1b7a-4674-bd1a-a213428d653b",
              "title": "POST /addfriend",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\addfriend.test.mjs",
              "file": "\\test\\Integration Test\\addfriend.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send a friend request successfully",
                  "fullTitle": "Friendship API POST /addfriend should send a friend request successfully",
                  "timedOut": false,
                  "duration": 56,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const addFriendResponse = await request(app)\n  .post('/friend/addfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ \n    senderId: userId,\n    receiverId: mockReceiverId \n});\n  \nexpect(addFriendResponse.statusCode).to.equal(200);\nexpect(addFriendResponse.body.message).to.equal('requested');",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:100:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "25542336-9858-41c6-a866-12231e9616ec",
                  "parentUUID": "6fee9955-1b7a-4674-bd1a-a213428d653b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if sending friend request to yourself",
                  "fullTitle": "Friendship API POST /addfriend should return 400 if sending friend request to yourself",
                  "timedOut": false,
                  "duration": 51,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const addFriendResponse = await request(app)\n  .post('/friend/addfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ senderId: userId, receiverId: mockUserId });\n  \nexpect(addFriendResponse.statusCode).to.equal(400);\nexpect(addFriendResponse.body.message).to.equal('Cannot send a friend request to yourself');",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 400",
                    "estack": "AssertionError: expected 404 to equal 400\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:110:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 400\n"
                  },
                  "uuid": "6b486913-2795-424e-8283-6e0a2e81be48",
                  "parentUUID": "6fee9955-1b7a-4674-bd1a-a213428d653b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if friend request already exists",
                  "fullTitle": "Friendship API POST /addfriend should return 400 if friend request already exists",
                  "timedOut": false,
                  "duration": 49,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const addFriendResponse = await request(app)\n  .post('/friend/addfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ senderId: userId, receiverId: mockReceiverId });\n  \nexpect(addFriendResponse.statusCode).to.equal(400);\nexpect(addFriendResponse.body.message).to.equal('Friend request already exists');",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 400",
                    "estack": "AssertionError: expected 404 to equal 400\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:120:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 400\n"
                  },
                  "uuid": "22afb034-56c2-4248-9e1e-720ac4579712",
                  "parentUUID": "6fee9955-1b7a-4674-bd1a-a213428d653b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "25542336-9858-41c6-a866-12231e9616ec",
                "6b486913-2795-424e-8283-6e0a2e81be48",
                "22afb034-56c2-4248-9e1e-720ac4579712"
              ],
              "pending": [],
              "skipped": [],
              "duration": 156,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9a1e0b8-7977-4c12-81b4-7d4cfe37eb14",
              "title": "POST /acceptfriend",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\addfriend.test.mjs",
              "file": "\\test\\Integration Test\\addfriend.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept a friend request successfully",
                  "fullTitle": "Friendship API POST /acceptfriend should accept a friend request successfully",
                  "timedOut": false,
                  "duration": 53,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Giả sử đã có yêu cầu kết bạn trong cơ sở dữ liệu\nconst acceptFriendResponse = await request(app)\n  .post('/friend/acceptfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ senderId: userId, requestId: mockReceiverId });\n  \nexpect(acceptFriendResponse.statusCode).to.equal(200);\nexpect(acceptFriendResponse.body.message).to.equal('Friend request accepted successfully');",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:133:52)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "e74cc74c-3081-465c-814b-60638c7636b3",
                  "parentUUID": "e9a1e0b8-7977-4c12-81b4-7d4cfe37eb14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if friend request not found",
                  "fullTitle": "Friendship API POST /acceptfriend should return 404 if friend request not found",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const acceptFriendResponse = await request(app)\n  .post('/friend/acceptfriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ senderId: userId, requestId: new mongoose.Types.ObjectId() });\n  \nexpect(acceptFriendResponse.statusCode).to.equal(404);\nexpect(acceptFriendResponse.body.message).to.equal('Friend request not found or already processed');",
                  "err": {},
                  "uuid": "ef374cd9-74d7-48c8-ba6b-d0ce3b7d40c9",
                  "parentUUID": "e9a1e0b8-7977-4c12-81b4-7d4cfe37eb14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef374cd9-74d7-48c8-ba6b-d0ce3b7d40c9"
              ],
              "failures": [
                "e74cc74c-3081-465c-814b-60638c7636b3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1090e9e-eb53-4058-9226-0a9773c15568",
              "title": "POST /removeFriend",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\addfriend.test.mjs",
              "file": "\\test\\Integration Test\\addfriend.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove a friend successfully",
                  "fullTitle": "Friendship API POST /removeFriend should remove a friend successfully",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const removeFriendResponse = await request(app)\n  .post('/friend/removeFriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ \n    senderId: userId, \n    receiverId: mockReceiverId \n    });\n  \nexpect(removeFriendResponse.statusCode).to.equal(200);\nexpect(removeFriendResponse.body.message).to.equal('Friend removed successfully');",
                  "err": {},
                  "uuid": "f0b9141e-af04-4273-a0aa-80cce649ecd5",
                  "parentUUID": "a1090e9e-eb53-4058-9226-0a9773c15568",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if an error occurs",
                  "fullTitle": "Friendship API POST /removeFriend should return 500 if an error occurs",
                  "timedOut": false,
                  "duration": 33,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Đặt lại mock để gây lỗi\nconst removeFriendResponse = await request(app)\n  .post('/friend/removeFriend')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ senderId: userId, receiverId: new mongoose.Types.ObjectId() });\n  \nexpect(removeFriendResponse.statusCode).to.equal(500);\nexpect(removeFriendResponse.body.message).to.equal('Server error');",
                  "err": {
                    "message": "AssertionError: expected 200 to equal 500",
                    "estack": "AssertionError: expected 200 to equal 500\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/addfriend.test.mjs:169:52)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 200\n+ 500\n"
                  },
                  "uuid": "7123a1e0-d921-4e62-a70c-2675fbcbda99",
                  "parentUUID": "a1090e9e-eb53-4058-9226-0a9773c15568",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0b9141e-af04-4273-a0aa-80cce649ecd5"
              ],
              "failures": [
                "7123a1e0-d921-4e62-a70c-2675fbcbda99"
              ],
              "pending": [],
              "skipped": [],
              "duration": 69,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "790584fc-a08d-4ddb-ad14-6268024a156c",
          "title": "Post API Tests",
          "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\managerpost.test.mjs",
          "file": "\\test\\Integration Test\\managerpost.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90e44bd0-61e9-4214-a549-a38c82c84889",
              "title": "GET /post",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\managerpost.test.mjs",
              "file": "\\test\\Integration Test\\managerpost.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the post of the user",
                  "fullTitle": "Post API Tests GET /post should return the post of the user",
                  "timedOut": false,
                  "duration": 85,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const postData = {\n  Author: fakeUserId,\n  content: 'This is a test post'\n};\nconst post = await Post.create(postData);\nconst response = await request(app)\n  .get('/post')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send();\nexpect(response.status).to.equal(200);  // Correct assertion\nexpect(response.body.message).to.equal('List your post');  // Correct assertion\nexpect(response.body.post.content).to.equal(postData.content);  // Correct assertion\nawait post.remove();",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:49:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "af36efc9-3092-4218-9540-e90723d52c71",
                  "parentUUID": "90e44bd0-61e9-4214-a549-a38c82c84889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if no post found",
                  "fullTitle": "Post API Tests GET /post should return 400 if no post found",
                  "timedOut": false,
                  "duration": 34,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .get('/post')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send();\nexpect(response.status).to.equal(400);  // Correct assertion\nexpect(response.body.message).to.equal('No post found');  // Correct assertion",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:62:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "9f6aa738-d022-49d8-821e-ddff7227acf2",
                  "parentUUID": "90e44bd0-61e9-4214-a549-a38c82c84889",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "af36efc9-3092-4218-9540-e90723d52c71",
                "9f6aa738-d022-49d8-821e-ddff7227acf2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39649fdb-8c61-4a5e-a381-398680e5c0d8",
              "title": "POST /post",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\managerpost.test.mjs",
              "file": "\\test\\Integration Test\\managerpost.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a personal post",
                  "fullTitle": "Post API Tests POST /post should create a personal post",
                  "timedOut": false,
                  "duration": 38,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const postData = {\n  content: 'This is a personal post',\n  mediaIds: [], // Fake mediaIds for the post\n  communityId: null\n};\nconst response = await request(app)\n  .post('/post')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send(postData);\nexpect(response.status).to.equal(200);  // Correct assertion\nexpect(response.body.message).to.equal('Personal post success');  // Correct assertion",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:81:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "608561cd-012c-49ca-a6af-6326378af695",
                  "parentUUID": "39649fdb-8c61-4a5e-a381-398680e5c0d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create a community post",
                  "fullTitle": "Post API Tests POST /post should create a community post",
                  "timedOut": false,
                  "duration": 29,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const postData = {\n  content: 'This is a community post',\n  mediaIds: [], // Fake mediaIds for the post\n  communityId: new mongoose.Types.ObjectId()\n};\nconst response = await request(app)\n  .post('/post')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send(postData);\nexpect(response.status).to.equal(200);  // Correct assertion\nexpect(response.body.message).to.equal('Community post success');  // Correct assertion",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:97:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "0cc7b021-0059-4b1f-ba7a-48c0b865e08f",
                  "parentUUID": "39649fdb-8c61-4a5e-a381-398680e5c0d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if communityId is missing for community post",
                  "fullTitle": "Post API Tests POST /post should return error if communityId is missing for community post",
                  "timedOut": false,
                  "duration": 33,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const postData = {\n  content: 'This is a community post without communityId',\n  mediaIds: [],\n  communityId: null\n};\nconst response = await request(app)\n  .post('/post')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send(postData);\nexpect(response.status).to.equal(400);  // Correct assertion\nexpect(response.body.message).to.equal('Community ID is required for community posts.');  // Correct assertion",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 400",
                    "estack": "AssertionError: expected 404 to equal 400\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:113:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 400\n"
                  },
                  "uuid": "364dfc27-f757-40da-b282-03e7c95c434b",
                  "parentUUID": "39649fdb-8c61-4a5e-a381-398680e5c0d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "608561cd-012c-49ca-a6af-6326378af695",
                "0cc7b021-0059-4b1f-ba7a-48c0b865e08f",
                "364dfc27-f757-40da-b282-03e7c95c434b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09cd0c66-861c-47be-878c-e237369c5efe",
              "title": "POST /like",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\managerpost.test.mjs",
              "file": "\\test\\Integration Test\\managerpost.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should like a post",
                  "fullTitle": "Post API Tests POST /like should like a post",
                  "timedOut": false,
                  "duration": 46,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const postData = {\n  content: 'Test post to like',\n  mediaIds: [],\n  communityId: null\n};\nconst post = await Post.create(postData);\nconst likeData = {\n  postId: post._id\n};\nconst response = await request(app)\n  .post('/like')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send(likeData);\nexpect(response.status).to.equal(200);  // Correct assertion\nexpect(response.body.message).to.equal('like post success');  // Correct assertion\n// Clean up by removing the post and like after the test\nawait post.remove();\nawait postlike.deleteMany({ post: post._id });",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:138:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "0ea9baf4-dd0d-43c2-9572-94557875e0cb",
                  "parentUUID": "09cd0c66-861c-47be-878c-e237369c5efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove like if already liked",
                  "fullTitle": "Post API Tests POST /like should remove like if already liked",
                  "timedOut": false,
                  "duration": 51,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const postData = {\n  content: 'Test post to remove like',\n  mediaIds: [],\n  communityId: null\n};\nconst post = await Post.create(postData);\n// Simulate a like being created\nconst likeData = {\n  postId: post._id\n};\nawait postlike.create({\n  post: post._id,\n  User: fakeUserId\n});\nconst response = await request(app)\n  .post('/like')\n  .set('Cookie', [`userId=${fakeUserId}`])  // Mock session cookie\n  .send(likeData);\nexpect(response.status).to.equal(200);  // Correct assertion\nexpect(response.body.message).to.equal('like post success');  // Correct assertion\n// Clean up by removing the post and like after the test\nawait post.remove();\nawait postlike.deleteMany({ post: post._id });",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/managerpost.test.mjs:170:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "2a89dd21-015e-45ea-9386-787252a39500",
                  "parentUUID": "09cd0c66-861c-47be-878c-e237369c5efe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0ea9baf4-dd0d-43c2-9572-94557875e0cb",
                "2a89dd21-015e-45ea-9386-787252a39500"
              ],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "22d11b8c-2626-497d-8437-6b6199e37215",
          "title": "Message API",
          "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\message.test.mjs",
          "file": "\\test\\Integration Test\\message.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3c02910-74b2-4328-ad17-b83748d4c893",
              "title": "POST /sendMessage",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\message.test.mjs",
              "file": "\\test\\Integration Test\\message.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new message with valid token",
                  "fullTitle": "Message API POST /sendMessage should create a new message with valid token",
                  "timedOut": false,
                  "duration": 31,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/message/sendmessage')\n  .set('Authorization', `Bearer ${token}`) // Add token to headers\n  .send({\n    content: \"Hello, this is a test message!\",\n    chatId: '672efdffcda5fb545398bb4e',\n    senderId: userId\n  });\nexpect(res.statusCode).to.equal(201);\nexpect(res.body.data.content).to.equal(\"Hello, this is a test message!\");",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 201",
                    "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:40:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 201\n"
                  },
                  "uuid": "b3e3024f-990a-449c-91f3-c1aab4dc5963",
                  "parentUUID": "b3c02910-74b2-4328-ad17-b83748d4c893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if content exceeds 500 characters",
                  "fullTitle": "Message API POST /sendMessage should return error if content exceeds 500 characters",
                  "timedOut": false,
                  "duration": 25,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/message/sendmessage')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    content: 'a'.repeat(501),\n    chatId: '672efdffcda5fb545398bb4e'\n  });\nexpect(res.statusCode).to.equal(400);\nexpect(res.body.message).to.equal(\"Tin nhắn vượt quá giới hạn ký tự, vui lòng rút ngắn tin nhắn\");",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:53:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "cea361f2-7b85-4a4e-97cf-20e24498cc99",
                  "parentUUID": "b3c02910-74b2-4328-ad17-b83748d4c893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return unauthorized error if token is missing",
                  "fullTitle": "Message API POST /sendMessage should return unauthorized error if token is missing",
                  "timedOut": false,
                  "duration": 27,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/message/sendmessage')\n  .send({\n    content: \"This message should not be sent\",\n    chatId: '672efdffcda5fb545398bb4e'\n  });\nexpect(res.statusCode).to.equal(401);\nexpect(res.body.message).to.equal(\"Access denied. No token provided.\");",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'Access denied. No token provided.'",
                    "estack": "AssertionError: expected undefined to equal 'Access denied. No token provided.'\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:66:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "00a5f0da-26ab-4904-9a22-9851596d903b",
                  "parentUUID": "b3c02910-74b2-4328-ad17-b83748d4c893",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b3e3024f-990a-449c-91f3-c1aab4dc5963",
                "cea361f2-7b85-4a4e-97cf-20e24498cc99",
                "00a5f0da-26ab-4904-9a22-9851596d903b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9fb74e9-b689-4156-978d-45302744ce23",
              "title": "GET /getMessage",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\message.test.mjs",
              "file": "\\test\\Integration Test\\message.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get messages for a given chat with valid token",
                  "fullTitle": "Message API GET /getMessage should get messages for a given chat with valid token",
                  "timedOut": false,
                  "duration": 27,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Seed a message\nconst res = await request(app)\n  .get('/message')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ chatId: '672efdffcda5fb545398bb4e'});\nexpect(res.statusCode).to.equal(200);\nexpect(res.body.data.length).to.beGreaterThan(0);\nexpect(res.body.data[0].content).to.equal(message.content);",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 200",
                    "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:79:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 200\n"
                  },
                  "uuid": "731eb7b2-c680-4e47-8168-0386412e87d1",
                  "parentUUID": "c9fb74e9-b689-4156-978d-45302744ce23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if chat does not exist",
                  "fullTitle": "Message API GET /getMessage should return 404 if chat does not exist",
                  "timedOut": false,
                  "duration": 27,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/message')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ chatId: new mongoose.Types.ObjectId() });\nexpect(res.statusCode).to.equal(404);\nexpect(res.body.message).to.equal(\"Chat not found\");",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 404",
                    "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:90:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 404\n"
                  },
                  "uuid": "e0c343b9-abc1-4218-93fb-47de5a7cecd8",
                  "parentUUID": "c9fb74e9-b689-4156-978d-45302744ce23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "731eb7b2-c680-4e47-8168-0386412e87d1",
                "e0c343b9-abc1-4218-93fb-47de5a7cecd8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 54,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9124c3d7-ac19-43ee-8fed-f34ecdb430b9",
              "title": "POST /messagelike",
              "fullFile": "C:\\Users\\giang\\Downloads\\Tester\\socialmessage\\test\\Integration Test\\message.test.mjs",
              "file": "\\test\\Integration Test\\message.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should like a message with valid token",
                  "fullTitle": "Message API POST /messagelike should like a message with valid token",
                  "timedOut": false,
                  "duration": 38,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const message = await Message.create({\n  content: 'Like this message!',\n  chatId: '672efdffcda5fb545398bb4e',\n  senderId: '672af038edb1baeb8d1d1ac9'\n});\nconst res = await request(app)\n  .post('/message/messagelike')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ messageId: '66f4532ddb2756c87a0a92c9' });\nexpect(res.statusCode).to.equal(201);\nexpect(res.body.message).to.equal(\"Message liked successfully\");",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 201",
                    "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:108:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 201\n"
                  },
                  "uuid": "479c6fb9-6102-44b0-b6e6-06f5bfcdfcf2",
                  "parentUUID": "9124c3d7-ac19-43ee-8fed-f34ecdb430b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return unauthorized error if token is missing",
                  "fullTitle": "Message API POST /messagelike should return unauthorized error if token is missing",
                  "timedOut": false,
                  "duration": 26,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/message/messagelike')\n  .send({ messageId: new mongoose.Types.ObjectId() });\nexpect(res.statusCode).to.equal(401);\nexpect(res.body.message).to.equal(\"Access denied. No token provided.\");",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'Access denied. No token provided.'",
                    "estack": "AssertionError: expected undefined to equal 'Access denied. No token provided.'\n    at Context.<anonymous> (file:///C:/Users/giang/Downloads/Tester/socialmessage/test/Integration%20Test/message.test.mjs:118:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "13406e07-f13b-4e59-ae3d-70a9303c984e",
                  "parentUUID": "9124c3d7-ac19-43ee-8fed-f34ecdb430b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "479c6fb9-6102-44b0-b6e6-06f5bfcdfcf2",
                "13406e07-f13b-4e59-ae3d-70a9303c984e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./reports",
        "reportFilename": "test-report",
        "json": "true",
        "html": "true"
      },
      "version": "6.2.0"
    }
  }
}